buildscript {
	ext {
		springBootVersion = '1.3.6.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath('se.transmode.gradle:gradle-docker:1.2')
	}
}

group = 'anywhereinfo'

/*
plugins {
    id "com.commercehub.gradle.plugin.avro" version "0.9.0"
}

apply plugin: "com.commercehub.gradle.plugin.avro"
*/
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'docker'

jar {
	baseName = 'demo'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

bootRepackage {
   mainClass = 'com.example.DemoApplication'
}

dependencies {
	compile('org.springframework.cloud:spring-cloud-starter-stream-kafka')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-configuration-processor')
	compile('org.springframework.cloud:spring-cloud-stream')
	compile('org.apache.avro:avro:1.8.1')
	compile ('org.springframework.boot:spring-boot-starter-websocket')
	compile('org.springframework:spring-messaging')
	compile ('org.springframework.boot:spring-boot-starter-logging')
	compile ('javax.inject:javax.inject:1')
    compile ('io.dropwizard.metrics:metrics-core')
    compile ('io.dropwizard.metrics:metrics-annotation:3.1.2')
    compile ('com.ryantenney.metrics:metrics-spring:3.1.2') {
    exclude(module: 'metrics-core')
    exclude(module: 'metrics-healthchecks')
		} 
	compile ('io.dropwizard.metrics:metrics-servlet:3.1.2')
    compile ('io.dropwizard.metrics:metrics-json:3.1.2')
    compile ('io.dropwizard.metrics:metrics-servlets:3.1.2') {
        exclude(module: 'metrics-healthchecks')
    }
    compile ('io.dropwizard.metrics:metrics-healthchecks:3.1.2')
    
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

dependencyManagement {
	imports { 
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:Brixton.SR3" 
	}
}


eclipse {
	classpath {
		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		 containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
	
task buildDocker(type: Docker, dependsOn: build) {
  push = false
  applicationName = jar.baseName
  dockerfile = file('src/main/docker/Dockerfile')
  doFirst {
    copy {
      from jar
      into stageDir
    }
  }
  }
}
